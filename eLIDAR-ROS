#include "math.h"
#if defined(ARDUINO) && ARDUINO >= 100
#include "Arduino.h"
#else
#include "WProgram.h"
#endif

// ROS includes
#include <ros.h>
#include <ros/time.h>
#include <sensor_msgs/LaserScan.h>
#include <tf/transform_broadcaster.h>
 
sensor_msgs::LaserScan CDLaser_msg;

//
float f_angle_min;
float f_angle_max;
float f_angle_increment;
float f_time_increment;
float f_scan_time;
float f_range_min;
float f_range_max;
float f_ranges[8] // max of 30 measurements
float f_intensities[8]

int publisher_timer;

geometry_msgs::TransformStamped t;
tf::TransformBroadcaster broadcaster;
ros:: Publisher pub_Laser("LaserData", &Lidar_msg);  
char base_link[] = "/base_link";
char odom[] = "/odom";
ros::NodeHandle nh;

void setup() 
{
  nh.initNode();
  nh.advertise(pub_Laser);
   broadcaster.init(nh);
  f_angle_min = 0;
  f_angle_max = 6.28;
  f_angle_increment = 0.785398;  // 3.14/4   - 8 measurement points
  f_time_increment = 10;
  f_scan_time = 4;
  f_range_min = 0.1;
  f_range_max = 2.5;

  Lidar_msg.ranges_length = 8;
  Lidar_msg.intensities_length = 8;
 /* For testing , PC is connected to USB port and 5th Lidar is disabled  */
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
 // pinMode(A0, OUTPUT);
  pinMode(A1, OUTPUT);
  pinMode(A2, OUTPUT);
  pinMode(A3, OUTPUT);

  digitalWrite(2, LOW);
  digitalWrite(3, LOW);
  digitalWrite(4, LOW);
  digitalWrite(5, LOW);
 // digitalWrite(A0, LOW);
  digitalWrite(A1, LOW);
  digitalWrite(A2, LOW);
  digitalWrite(A3, LOW);
  
  Serial.begin(57600);
  Wire.begin();
  
  delay(300);

// Lidar 1
  digitalWrite(2, HIGH);
  delay(50);
  sensor.init(true);
  delay(10);
  sensor.setAddress((uint8_t)01);
  Serial.println("Lidar 1 set");

// Lidar 2
  digitalWrite(3, HIGH);
  delay(50);
  sensor2.init(true);
  delay(10);
  sensor2.setAddress((uint8_t)02);
  Serial.println("Lidar 2 set");

//Lidar 3   
  digitalWrite(4, HIGH);
  delay(50);
  sensor3.init(true);
  delay(10);
  sensor3.setAddress((uint8_t)03);
  Serial.println("Lidar 3 set");

//Lidar 4
  digitalWrite(5, HIGH);
  delay(50);
  sensor4.init(true);
  delay(10);
  sensor4.setAddress((uint8_t)04);
  Serial.println("Lidar 4 set");
  
//Lidar
  digitalWrite(A0, HIGH);
  delay(150);
  sensor5.init(true);
  delay(100);
  sensor5.setAddress((uint8_t)05);
  Serial.println("Lidar 5 set");

//Lidar 6
  digitalWrite(A1, HIGH);
  delay(50);
  sensor6.init(true);
  delay(10);
  sensor6.setAddress((uint8_t)06);
  Serial.println("Lidar 6 set");

// Lidar 7
  digitalWrite(A2, HIGH);
  delay(50);
  sensor7.init(true);
  delay(10);
  sensor7.setAddress((uint8_t)07);
  Serial.println("Lidar 7 set");

// Lidar 8
  digitalWrite(A3, HIGH);
  delay(50);
  sensor8.init(true);
  delay(10);
  sensor8.setAddress((uint8_t)10);
  Serial.println("Lidar 8 set");

// Triger Lidars for continous ranging  
  sensor.startContinuous(10);
  sensor2.startContinuous(10);
  sensor3.startContinuous(10);
  sensor4.startContinuous(10);
  sensor5.startContinuous(10);
  sensor6.startContinuous(10);
  sensor7.startContinuous(10);
  sensor8.startContinuous(10);

  // create the test data
  for (int z = 0 ; z<8; z++)
  {
    f_ranges[z] = z;
    f_intensities[z] = z*z;
  }
}

void loop() 
{
  if (millis() > publisher_timer)
  {
    Lidar_msg.header.stamp = nh.now();
    Lidar_msg.header.frame_id = "/lidar_frame";
    Lidar_msg.angle_min = f_angle_min;
    Lidar_msg.angle_max = f_angle_max;
    Lidar_msg.angle_increment = f_angle_increment;
    Lidar_msg.time_increment = f_time_increment;
    Lidar_msg.scan_time = f_scan_time;
    Lidar_msg.range_min = f_range_min;
    Lidar_msg.range_max = f_range_max;

    for (int z = 0 ; z<8; z++)
    {
      Lidar_msg.ranges[z] = f_ranges[z];
    }

    for (int z = 0 ; z<8; z++)
    {
      Lidar_msg.intensities[z] = f_intensities[z];
    }

    publisher_timer = millis() + 1000;
    pub_Laser.publish(Lidar_msg);
    t.header.frame_id = odom;
    t.child_frame_id = base_link;
    t.transform.translation.x = 1.0; 
    t.transform.rotation.x = 0.0;
    t.transform.rotation.y = 0.0; 
    t.transform.rotation.z = 0.0; 
    t.transform.rotation.w = 1.0;  
    t.header.stamp = nh.now();
    broadcaster.sendTransform(t);
  }
  nh.spinOnce();
  delay(50);
}

